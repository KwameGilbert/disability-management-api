const db=require("../config/db"),bcrypt=require("bcrypt"),jwt=require("jsonwebtoken"),generateToken=user=>jwt.sign({id:user.id,role:user.role},process.env.JWT_SECRET,{expiresIn:process.env.JWT_EXPIRY});exports.register=async(req,res)=>{const{full_name:full_name,email:email,password:password,role:role}=req.body,hashedPassword=await bcrypt.hash(password,10);if((await db.query("SELECT * FROM users WHERE email = $1",[email])).rows.length>0)return res.status(409).json({message:"User already exists"});const user=(await db.query("INSERT INTO users (full_name, email, password, role) VALUES ($1, $2, $3, $4) RETURNING id, full_name, email, role",[full_name,email,hashedPassword,role])).rows[0],token=generateToken(user);res.status(201).json({user:user,token:token})},exports.login=async(req,res)=>{const{email:email,password:password}=req.body,user=(await db.query("SELECT * FROM users WHERE email = $1",[email])).rows[0];if(!user)return res.status(401).json({message:"User not found"});if(!await bcrypt.compare(password,user.password))return res.status(401).json({message:"Wrong Password"});delete user.password;const token=generateToken(user);res.json({user:user,token:token})},exports.me=async(req,res)=>{const result=await db.query("SELECT id, full_name, email, role FROM users WHERE id = $1",[req.user.id]);res.json(result.rows[0])};